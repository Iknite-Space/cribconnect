// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: message.sql

package repo

import (
	"context"
	"encoding/json"
	"time"
)

const getUserById = `-- name: GetUserById :one
SELECT user_id, fname, lname, birthdate, phoneno, email, bio, habbits, profile_picture, created_at FROM users
WHERE user_id = $1
LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, userID string) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Fname,
		&i.Lname,
		&i.Birthdate,
		&i.Phoneno,
		&i.Email,
		&i.Bio,
		&i.Habbits,
		&i.ProfilePicture,
		&i.CreatedAt,
	)
	return i, err
}

const registerUser = `-- name: RegisterUser :one





INSERT INTO users (user_id,email)
VALUES ($1, $2)
RETURNING user_id,email
`

type RegisterUserParams struct {
	UserID string `json:"user_id"`
	Email  string `json:"email"`
}

type RegisterUserRow struct {
	UserID string `json:"user_id"`
	Email  string `json:"email"`
}

// -- name: CreateMessage :one
// INSERT INTO message (thread, sender, content)
// VALUES ($1, $2, $3)
// RETURNING *;
// -- name: GetMessageByID :one
// SELECT * FROM message
// WHERE id = $1;
// -- name: GetMessagesByThread :many
// SELECT * FROM message
// WHERE thread = $1
// ORDER BY created_at DESC;
// -- name: DeleteMessage :exec
// DELETE FROM message
// WHERE id = $1;
func (q *Queries) RegisterUser(ctx context.Context, arg RegisterUserParams) (RegisterUserRow, error) {
	row := q.db.QueryRow(ctx, registerUser, arg.UserID, arg.Email)
	var i RegisterUserRow
	err := row.Scan(&i.UserID, &i.Email)
	return i, err
}

const updateUserProfile = `-- name: UpdateUserProfile :one
UPDATE users
SET
    fname = COALESCE($2, fname),
    lname = COALESCE($3, lname),
    phoneno = COALESCE($4, phoneno),
    birthdate = COALESCE($5, birthdate),
    bio = COALESCE($6, bio),
    habbits = COALESCE($7, preferences),
    profile_picture = COALESCE($8, profile_picture)
WHERE user_id = $1
RETURNING user_id, fname, lname, birthdate, phoneno, email, bio, habbits, profile_picture, created_at
`

type UpdateUserProfileParams struct {
	UserID         string          `json:"user_id"`
	Fname          *string         `json:"fname"`
	Lname          *string         `json:"lname"`
	Phoneno        *string         `json:"phoneno"`
	Birthdate      time.Time       `json:"birthdate"`
	Bio            string          `json:"bio"`
	Habbits        json.RawMessage `json:"habbits"`
	ProfilePicture *string         `json:"profile_picture"`
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserProfile,
		arg.UserID,
		arg.Fname,
		arg.Lname,
		arg.Phoneno,
		arg.Birthdate,
		arg.Bio,
		arg.Habbits,
		arg.ProfilePicture,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Fname,
		&i.Lname,
		&i.Birthdate,
		&i.Phoneno,
		&i.Email,
		&i.Bio,
		&i.Habbits,
		&i.ProfilePicture,
		&i.CreatedAt,
	)
	return i, err
}
