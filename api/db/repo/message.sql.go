// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: message.sql

package repo

import (
	"context"
	"encoding/json"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const filterUsersByPreferences = `-- name: FilterUsersByPreferences :many
SELECT 
 COALESCE(user_id, '') AS user_id,
  COALESCE(fname, '') AS fname,
  COALESCE(lname, '') AS lname,
  COALESCE(birthdate, '2000-01-01') AS birthdate,
  COALESCE(phoneno, '') AS phoneno,
  COALESCE(email, '') AS email,
  COALESCE(bio, '') AS bio,
  COALESCE(habbits, '{}'::jsonb) AS habbits,
  COALESCE(profile_picture, '') AS profile_picture,
  COALESCE(created_at, now()) AS created_at
  FROM users
WHERE habbits @> $1::jsonb
`

type FilterUsersByPreferencesRow struct {
	UserID         string           `json:"user_id"`
	Fname          string           `json:"fname"`
	Lname          string           `json:"lname"`
	Birthdate      pgtype.Date      `json:"birthdate"`
	Phoneno        string           `json:"phoneno"`
	Email          string           `json:"email"`
	Bio            string           `json:"bio"`
	Habbits        json.RawMessage  `json:"habbits"`
	ProfilePicture string           `json:"profile_picture"`
	CreatedAt      pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) FilterUsersByPreferences(ctx context.Context, dollar_1 []byte) ([]FilterUsersByPreferencesRow, error) {
	rows, err := q.db.Query(ctx, filterUsersByPreferences, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FilterUsersByPreferencesRow{}
	for rows.Next() {
		var i FilterUsersByPreferencesRow
		if err := rows.Scan(
			&i.UserID,
			&i.Fname,
			&i.Lname,
			&i.Birthdate,
			&i.Phoneno,
			&i.Email,
			&i.Bio,
			&i.Habbits,
			&i.ProfilePicture,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT 
  COALESCE(user_id, '') AS user_id,
  COALESCE(fname, '') AS fname,
  COALESCE(lname, '') AS lname,
  COALESCE(birthdate, '2000-01-01') AS birthdate,
  COALESCE(phoneno, '') AS phoneno,
  COALESCE(email, '') AS email,
  COALESCE(bio, '') AS bio,
  COALESCE(habbits, '{}'::jsonb) AS habbits,
  COALESCE(profile_picture, '') AS profile_picture,
  COALESCE(created_at, now()) AS created_at
FROM users
WHERE user_id != $1
`

type GetAllUsersRow struct {
	UserID         string           `json:"user_id"`
	Fname          string           `json:"fname"`
	Lname          string           `json:"lname"`
	Birthdate      pgtype.Date      `json:"birthdate"`
	Phoneno        string           `json:"phoneno"`
	Email          string           `json:"email"`
	Bio            string           `json:"bio"`
	Habbits        json.RawMessage  `json:"habbits"`
	ProfilePicture string           `json:"profile_picture"`
	CreatedAt      pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) GetAllUsers(ctx context.Context, userID string) ([]GetAllUsersRow, error) {
	rows, err := q.db.Query(ctx, getAllUsers, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllUsersRow{}
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(
			&i.UserID,
			&i.Fname,
			&i.Lname,
			&i.Birthdate,
			&i.Phoneno,
			&i.Email,
			&i.Bio,
			&i.Habbits,
			&i.ProfilePicture,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByFirebaseId = `-- name: GetUserByFirebaseId :one
SELECT user_id, email FROM users
WHERE user_id = $1
LIMIT 1
`

type GetUserByFirebaseIdRow struct {
	UserID string `json:"user_id"`
	Email  string `json:"email"`
}

func (q *Queries) GetUserByFirebaseId(ctx context.Context, userID string) (GetUserByFirebaseIdRow, error) {
	row := q.db.QueryRow(ctx, getUserByFirebaseId, userID)
	var i GetUserByFirebaseIdRow
	err := row.Scan(&i.UserID, &i.Email)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT 
  COALESCE(user_id, '') AS user_id,
  COALESCE(fname, '') AS fname,
  COALESCE(lname, '') AS lname,
  COALESCE(birthdate, '2000-01-01') AS birthdate,
  COALESCE(phoneno, '') AS phoneno,
  COALESCE(email, '') AS email,
  COALESCE(bio, '') AS bio,
  COALESCE(habbits, '{}'::jsonb) AS habbits,
  COALESCE(profile_picture, '') AS profile_picture,
  COALESCE(created_at, now()) AS created_at
FROM users
WHERE user_id = $1
LIMIT 1
`

type GetUserByIdRow struct {
	UserID         string           `json:"user_id"`
	Fname          string           `json:"fname"`
	Lname          string           `json:"lname"`
	Birthdate      pgtype.Date      `json:"birthdate"`
	Phoneno        string           `json:"phoneno"`
	Email          string           `json:"email"`
	Bio            string           `json:"bio"`
	Habbits        json.RawMessage  `json:"habbits"`
	ProfilePicture string           `json:"profile_picture"`
	CreatedAt      pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) GetUserById(ctx context.Context, userID string) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, userID)
	var i GetUserByIdRow
	err := row.Scan(
		&i.UserID,
		&i.Fname,
		&i.Lname,
		&i.Birthdate,
		&i.Phoneno,
		&i.Email,
		&i.Bio,
		&i.Habbits,
		&i.ProfilePicture,
		&i.CreatedAt,
	)
	return i, err
}

const getUserHabbits = `-- name: GetUserHabbits :one
SELECT habbits
FROM users
WHERE user_id = $1
`

func (q *Queries) GetUserHabbits(ctx context.Context, userID string) (json.RawMessage, error) {
	row := q.db.QueryRow(ctx, getUserHabbits, userID)
	var habbits json.RawMessage
	err := row.Scan(&habbits)
	return habbits, err
}

const registerUser = `-- name: RegisterUser :one





INSERT INTO users (user_id,email)
VALUES ($1, $2)
RETURNING user_id,email
`

type RegisterUserParams struct {
	UserID string `json:"user_id"`
	Email  string `json:"email"`
}

type RegisterUserRow struct {
	UserID string `json:"user_id"`
	Email  string `json:"email"`
}

// -- name: CreateMessage :one
// INSERT INTO message (thread, sender, content)
// VALUES ($1, $2, $3)
// RETURNING *;
// -- name: GetMessageByID :one
// SELECT * FROM message
// WHERE id = $1;
// -- name: GetMessagesByThread :many
// SELECT * FROM message
// WHERE thread = $1
// ORDER BY created_at DESC;
// -- name: DeleteMessage :exec
// DELETE FROM message
// WHERE id = $1;
func (q *Queries) RegisterUser(ctx context.Context, arg RegisterUserParams) (RegisterUserRow, error) {
	row := q.db.QueryRow(ctx, registerUser, arg.UserID, arg.Email)
	var i RegisterUserRow
	err := row.Scan(&i.UserID, &i.Email)
	return i, err
}

const updateUserProfile = `-- name: UpdateUserProfile :one
UPDATE users
SET
    fname = COALESCE($2, fname),
    lname = COALESCE($3, lname),
    email = COALESCE($4, email),
    phoneno = COALESCE($5, phoneno),
    birthdate = COALESCE($6, birthdate),
    bio = COALESCE($7, bio),
    habbits = COALESCE($8, habbits),
    profile_picture = COALESCE($9, profile_picture)
WHERE user_id = $1
RETURNING user_id, fname, lname, birthdate, phoneno, email, bio, habbits, profile_picture, created_at
`

type UpdateUserProfileParams struct {
	UserID         string          `json:"user_id"`
	Fname          *string         `json:"fname"`
	Lname          *string         `json:"lname"`
	Email          string          `json:"email"`
	Phoneno        *string         `json:"phoneno"`
	Birthdate      time.Time       `json:"birthdate"`
	Bio            string          `json:"bio"`
	Habbits        json.RawMessage `json:"habbits"`
	ProfilePicture *string         `json:"profile_picture"`
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserProfile,
		arg.UserID,
		arg.Fname,
		arg.Lname,
		arg.Email,
		arg.Phoneno,
		arg.Birthdate,
		arg.Bio,
		arg.Habbits,
		arg.ProfilePicture,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Fname,
		&i.Lname,
		&i.Birthdate,
		&i.Phoneno,
		&i.Email,
		&i.Bio,
		&i.Habbits,
		&i.ProfilePicture,
		&i.CreatedAt,
	)
	return i, err
}
